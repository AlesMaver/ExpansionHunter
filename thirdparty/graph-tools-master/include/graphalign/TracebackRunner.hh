//
// GraphTools library
// Copyright (c) 2018 Illumina, Inc.
// All rights reserved.
//
// Author: Egor Dolzhenko <edolzhenko@illumina.com>
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.

// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma once

#include <list>
#include <string>

#include "graphalign/LinearAlignment.hh"
#include "graphalign/TracebackMatrix.hh"

namespace graphtools
{
/**
 * Implements traceback of dynamic programming matrices generated by local and global alignment algorithms
 */
class TracebackRunner
{
public:
    explicit TracebackRunner(const TracebackMatrix& matrix)
        : matrix_(matrix)
    {
    }

    // Performs traceback starting from a given cell of the matrix
    Alignment runTraceback(size_t row_index, size_t col_index);

private:
    void computeTracebackRunForAlignmentOperation(size_t row_index, size_t col_index);
    void tracebackPosition(size_t& row_index, size_t& col_index);
    void convertCurrentRunToAlignmentOperation();
    void softclipQuerySuffix(size_t& row_index);
    void softclipQueryPrefix(size_t& row_index);

    const TracebackMatrix& matrix_;

    std::list<Operation> operations_;
    TracebackStep run_traceback_step;
    size_t run_length = 0;
    size_t run_last_row_index = 0;
    size_t run_last_col_index = 0;
};
}
